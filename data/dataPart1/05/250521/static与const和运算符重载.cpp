C++ 静态成员函数及静态成员变量
1. static 成员的特点
    1.1 static 成员的名字在类的作用域中,因此可以避免与其他类成员或全局对象名字冲突。
    1.2 static 成员遵循正常的公有／私有访问规则,而全局对象不可以。
    1.3 static 成员,有全局对象的作用,但又不破坏封装。
    1.4 static 数据成员是与类关联,并不与该类的对象相关联。

2. static 成员函数
    2.1 对象与对象之间的成员变量是相互独立的。要想共用数据,则需要使用静态成员和静态方法。
    2.2 只要在类中声明静态成员变量,即使不定义对象,也可以为静态成员变量分配空间,进而可以使用静态成员变量。(静态成员变量在对象创建之前就已经被分配了内存空间)
    2.3 静态成员变量虽然在类中,但它并不是随对象的建立而分配空间的,也不是随对象的撤销而释放(普通成员在对象建立时会分配空间,在对象撤销时释放)。
        静态成员变量是在程序编译时分配空间,而在程序结束时释放空间。
    2.4 静态成员的定义和声明要加个关键static。静态成员可以通过双冒号来使用,即<类名>::<静态成员名>。
    2.5 static 数据成员必须在类定义体的外部定义,并且应该在定义时进行初始化。初始化的格式如下：数据类型 类名::静态成员变量名 = 初值；
    2.6 不能用参数初始化表对静态成员变量进行初始化。
    2.7 既可以通过类名来对静态成员变量进行引用,也可以通过对象名来对静态成员变量进行引用。
    2.8 普通成员函数和静态成员函数的区别是:普通成员函数在参数传递时编译器会隐藏地传递一个this指针。通过this指针来确定调用类产生的哪个对象;
        但是静态成员函数没有this指针,不知道应该访问哪个对象中的数据,所以在程序中不可以用静态成员函数访问类中的普通变量。

3. static成员的应用
    3.1 不能通过类名来调用类的非静态成员函数。
    3.2 类的对象可以调用静态成员函数和非静态成员函数。
    3.3 静态成员函数不能访问非静态成员变量。静态成员函数可以访问静态成员变量。
    3.4 类的非静态成员可以调用静态成员函数,但反之不能。
    3.5 类的静态成员变量必须先初始化再使用。

C++中 const 的用法
1. const 修饰变量



const类型的对象不能调用非const成员,只能调用const成员。但是非const类型的对象可以调用const成员。


友元
1. 友元的概念
    友元是指在一个类中,将另一个类的成员函数声明为友元函数,这样友元函数就可以访问该类的私有成员。
2. 友元语法
    2.1 友元函数的声明
        friend 函数返回类型 函数名(参数列表);
    2.2 友元类的声明
        friend class 类名;
3. 友元的优点和缺点
    优点: 友元函数可以访问类的私有成员,提高了程序的效率。
    缺点: 破坏了类的封装性。

总结:
✧ 友元机制允许一个类将对其非公有成员的访问权授予指定的函数或类。
✧ 友元可以出现在类定义的内部的任何地方。
✧ 友元不能被继承。
✧ 友元关系是单向的,类A是类B的朋友,但类B不一定是类A的朋友。
✧ 友元关系不具有传递性。类B是类A的朋友,类C是类B的朋友,但类C不一定是类A的朋友。

运算符重载:
1. 什么是运算符重载
    运算符重载是指在C++中,可以重新定义运算符的行为,使其适用于自定义类型。
2. 运算符重载的语法
    2.1 运算符重载的函数名是`operator`加上运算符的符号。
注意:不是所有运算符都可以重载,以下运算符不能重载:
    .  ::  ?:  .*  sizeof


